#!/usr/bin/env python
import rospy
from geometry_msgs.msg import PoseStamped, TwistStamped, Vector3Stamped
import numpy as np

# parámetros del PD 
Kp = np.array([10.0, 10.0, 10.0])  # Ganancias proporcionales
Kd = np.array([0.9, 0.9, 0.9])  # Ganancias derivativas

# estado deseado y actual 
desired_pose = np.zeros(3)
current_pose = np.zeros(3)
current_vel = np.zeros(3)

def desired_pose_callback(msg):
    global desired_pose
    desired_pose = np.array([msg.pose.position.x, msg.pose.position.y, msg.pose.position.z])

def current_pose_callback(msg):
    global current_pose
    current_pose = np.array([msg.pose.position.x, msg.pose.position.y, msg.pose.position.z])

def current_vel_callback(msg):
    global current_vel
    current_vel = np.array([msg.twist.linear.x, msg.twist.linear.y, msg.twist.linear.z])

def position_control():
    rospy.init_node('position_control_node', anonymous=True)
    rospy.Subscriber('/desired_trajectory', PoseStamped, desired_pose_callback)
    rospy.Subscriber('/current_pose', PoseStamped, current_pose_callback)
    rospy.Subscriber('/current_velocity', TwistStamped, current_vel_callback)
    acc_pub = rospy.Publisher('/desired_acceleration', TwistStamped, queue_size=10)
    ang_pub = rospy.Publisher('/desired_angles', Vector3Stamped, queue_size=10)
    rate = rospy.Rate(100)  

    while not rospy.is_shutdown():
        # error de posición y velocidad
        error_pos = desired_pose - current_pose
        error_vel = np.zeros(3) - current_vel  
        # aceleración deseada 
        desired_acc = Kp * error_pos + Kd * error_vel
        acc_msg = TwistStamped()
        acc_msg.header.stamp = rospy.Time.now()
        acc_msg.twist.linear.x = desired_acc[0]
        acc_msg.twist.linear.y = desired_acc[1]
        acc_msg.twist.linear.z = desired_acc[2]
        acc_pub.publish(acc_msg)
        rate.sleep()
if __name__ == '__main__':
    try:
        position_control()
    except rospy.ROSInterruptException:
        pass
