#!/usr/bin/env python
import rospy
from geometry_msgs.msg import TwistStamped, Vector3Stamped
import numpy as np

# controlador PD para ángulos 
Kp_ang = np.array([5.0, 5.0, 5.0])  # Ganancias proporcionales
Kd_ang = np.array([0.01, 0.01, 0.01])  # Ganancias derivativas
desired_angles = np.zeros(3)
current_angles = np.zeros(3)
current_angular_vel = np.zeros(3)

def desired_angles_callback(msg):
    global desired_angles
    desired_angles = np.array([msg.vector.x, msg.vector.y, msg.vector.z])
def current_angles_callback(msg):
    global current_angles
    current_angles = np.array([msg.vector.x, msg.vector.y, msg.vector.z])
def current_angular_vel_callback(msg):
    global current_angular_vel
    current_angular_vel = np.array([msg.vector.x, msg.vector.y, msg.vector.z])
def angular_control():
    rospy.init_node('angular_control_node', anonymous=True)
    rospy.Subscriber('/desired_angles', Vector3Stamped, desired_angles_callback)
    rospy.Subscriber('/current_angles', Vector3Stamped, current_angles_callback)
    rospy.Subscriber('/current_angular_velocity', Vector3Stamped, current_angular_vel_callback)
    pub = rospy.Publisher('/control_torques', Vector3Stamped, queue_size=10)
    rate = rospy.Rate(100)  
    while not rospy.is_shutdown():
        # error de ángulos y velocidad angular
        error_angles = desired_angles - current_angles
        error_angular_vel = np.zeros(3) - current_angular_vel          # Cálculo del torque deseado utilizando control PD
        desired_torques = Kp_ang * error_angles + Kd_ang * error_angular_vel

        # Publicar los torques de control
        torque_msg = Vector3Stamped()
        torque_msg.header.stamp = rospy.Time.now()
        torque_msg.vector.x = desired_torques[0]
        torque_msg.vector.y = desired_torques[1]
        torque_msg.vector.z = desired_torques[2]
        pub.publish(torque_msg)
        rate.sleep()


if __name__ == '__main__':
    try:
        angular_control()
    except rospy.ROSInterruptException:
        pass
